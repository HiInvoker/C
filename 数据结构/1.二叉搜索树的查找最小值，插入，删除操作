1.二叉搜索树的查找最小值，插入，删除操作

#include <stdio.h>
#include <stdlib.h>

typedef int ElemType;

typedef struct Node{
    ElemType val;
    struct Node* left;
    struct Node* right;
}Node;

Node* insertItem(Node* root, ElemType x)
{
    if ( !root ) {
        Node* new = malloc(sizeof(Node));
        new->val = x;
        new->left = NULL;
        new->right = NULL;
    } else {
        if ( x < root->val ) {
            root->left = insertItem(root->left, x);
        } else if ( x > root->val ) {
            root->right = insertItem(root->right, x);
        }
    }

    return root;
}

Node* findMin(Node* root)
{
    if ( !root ) {
        return NULL;
    } else {
        while ( root->left ) {
            root = root->left;
        }
        return root;
    }
}

Node* deleteNode(Node* root, ElemType x)
{
    Node* tmp;
    if ( !root ) {
        printf("can't find the item\n");
    } else if ( x < root->val ) {
        root->left = deleteNode(root->left, x);
    } else if ( x > root->val ) {
        root->right = deleteNode(root->right, x);
    } else {
        if ( root->left && root->right ) {
            tmp = findMin(root->right);
            root->val = tmp->val;
            root->right = deleteNode(root->right, root->val);
        } else {
            tmp = root;
            if ( !root->left ) {
                root = root->right;
            } else if ( !root->right ) {
                root = root->left;
            }
            free(tmp);
        }
    }
    return root;
}
